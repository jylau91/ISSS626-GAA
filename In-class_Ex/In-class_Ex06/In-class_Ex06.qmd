---
title: "In-class Exercise 06"
author: "Lau Jia Yi"
date: September 30, 2024
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

## Installing and loading the R Packages

```{r}
pacman::p_load(sf, sfdep, tmap, plotly, tidyverse, Kendall)
```

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

```{r}
GDPPC <- read_csv("data/aspatial/Hunan_GDPPC.csv")
```

```{r}
GDPPC_st <- spacetime(GDPPC, hunan,
                      .loc_col = "County",
                      .time_col = "Year")
```

```{r}
is_spacetime_cube(GDPPC_st)
```

Note: GDPPC_st is an object class that will help to find the lookup on the data structure for timespace data. At the data table level, it will be identical to GDPPC.

## Computing Gi

Computing the local Gi\* statistics.

## Deriving the spatial weights

The code chunk below will be used to identify neighbors and to derive an inverse distance weights.

```{r}
GDPPC_nb <- GDPPC_st %>%
  activate("geometry") %>% # use the geometry attributes and ignore the rest
  mutate(nb = include_self( #Gi* = include self, if no * dont include self.
    st_contiguity(geometry)),
    wt = st_inverse_distance(nb, #inverse data weight - for Gi*
                             geometry,
                             scale = 1,
                             alpha = 1),
    .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")

```

```{r}
gi_stars <- GDPPC_nb %>%
  group_by(Year) %>%
  mutate(gi_star = local_gstar_perm(
    GDPPC, nb, wt)) %>%
  tidyr::unnest(gi_star)

```

Note: after the data is built into a flat file \<- further analysis can be done. i.e. via MK test (Mann-Kendall).

MK Test to test if data exhibiits monotonic or non-monotonic trend. Best practice is to have minimum 10 data points (years) and 12 for further analysis.

A monotonic series or function is one that only increases (or decreases and never changes direction. So long as the function either stays flat or continues to increase, it is monotonic.

H0: No Monotonic trend.

H1: Monotonic trend is present.

Reject null if p-value is smaller than alpha.

Tau ranges between -1 and 1 where:

-1 is a perfectly decreasing series, and

1 is a perfectly increasing series.

```{r}
cbg <- gi_stars %>%
  ungroup() %>%
  filter(County == "Changsha") %>%
  select(County, Year, gi_star)
```

```{r}
ggplot(data = cbg,
       aes(x=Year,
           y= gi_star)) +
  geom_line() +
  theme_light()
```

```{r}
p <- ggplot(data = cbg,
       aes(x=Year,
           y= gi_star)) +
  geom_line() +
  theme_light()

ggplotly(p)
```

```{r}
cbg %>%
  summarise (mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
```

```{r}
ehsa <- gi_stars %>%
  group_by(County) %>%
  summarise(mk = list (
    unclass(
      Kendall::MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
head(ehsa)

```

```{r}
set.seed(8888)
ehsa <- emerging_hotspot_analysis(
  x = GDPPC_st,
  .var = "GDPPC",
  k = 1,
  nsim = 99
)
```

```{r}
head(ehsa)
```

```{r}
hunan_ehsa <- hunan %>%
  left_join(ehsa,
            by = join_by(County == location))
```

```{r}
ehsa_sig <- hunan_ehsa %>%
  filter(p_value < 0.05)
tmap_mode("plot")
tm_shape(hunan_ehsa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
  tm_fill("classification") +
  tm_borders(alpha = 0.4)
```

```{r}
ehsa_sig <- hunan_ehsa %>%
  filter(p_value < 0.05) %>%
  filter(classification %in% list("sporadic hotspot",
                                  "oscilating hotspot",
                                  "sporadic coldspot",
                                  "oscilating coldspot"))
tmap_mode("plot")
tm_shape(hunan_ehsa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
  tm_fill("classification") +
  tm_borders(alpha = 0.4)
```
