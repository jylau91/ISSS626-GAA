{
  "hash": "07a6c2512e50ee39cfc2e94e110500d3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 2\"\nauthor: \"Lau Jia Yi\"\ndate: 13 Oct 2024\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n---\n\n\n# Objectives\n\nTo discover:\n\n-   if the key indicators of tourism economy of Thailand are independent from space and space and time.\n\n-   If the tourism economy is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.\n\n## The Task\n\nThe specific tasks of this take-home exercise are as follows:\n\n-   Using appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer:\n\n    -   a study area layer in sf polygon features. It must be at [province level](https://en.wikipedia.org/wiki/Provinces_of_Thailand) (including Bangkok) of Thailand.\n\n    -   a tourism economy indicators layer within the study area in sf polygon features.\n\n    -   a derived tourism economy indicator layer in [**spacetime s3 class of sfdep**](https://sfdep.josiahparry.com/articles/spacetime-s3). Keep the time series at **month and year levels**.\n\n-   Using the extracted data, perform global spatial autocorrelation analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa).\n\n-   Using the extracted data, perform local spatial autocorrelation analysis by using [sfdep methods](https://r4gdsa.netlify.app/chap10.html).\n\n-   Using the extracted data, perform emerging hotspot analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-ehsa).\n\n-   Describe the spatial patterns revealed by the analysis above.\n\n# Getting Started\n\n## Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, sfdep, tmap, spacetime, dplyr, lubridate, spdep, plotly)\n```\n:::\n\n\n## Loading the datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_data <- read_csv(\"data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundaries <- st_read(dsn = \"data/rawdata/\",\n                            layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\Users\\User\\OneDrive - Singapore Management University\\Semester 4\\ISSS626-G1 Geo Spatial Analytics and Applications\\jylau91\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex02\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nSelecting the required columns for analysis from admin boundaries and removing excess spaces in provinces to prepare dataframe for leftjoin with tourism dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundaries <- admin_boundaries %>%\n  mutate(ADM1_EN = str_trim(ADM1_EN)) %>%\n  select(Shape_Leng, Shape_Area, ADM1_EN, ADM1_PCODE, geometry)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(admin_boundaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 100.1913 ymin: 13.47842 xmax: 100.9639 ymax: 14.80246\nGeodetic CRS:  WGS 84\n  Shape_Leng Shape_Area                  ADM1_EN ADM1_PCODE\n1   2.417227 0.13133873                  Bangkok       TH10\n2   1.695100 0.07926199             Samut Prakan       TH11\n3   1.251111 0.05323766               Nonthaburi       TH12\n4   1.884945 0.12698345             Pathum Thani       TH13\n5   3.041716 0.21393797 Phra Nakhon Si Ayutthaya       TH14\n6   1.739908 0.07920961                Ang Thong       TH15\n                        geometry\n1 MULTIPOLYGON (((100.6139 13...\n2 MULTIPOLYGON (((100.7306 13...\n3 MULTIPOLYGON (((100.3415 14...\n4 MULTIPOLYGON (((100.8916 14...\n5 MULTIPOLYGON (((100.5131 14...\n6 MULTIPOLYGON (((100.3332 14...\n```\n\n\n:::\n:::\n\n\nCleaning the tourism dataset:\n\n-   Uniform date format\n\n-   Remove excess spaces from province names\n\n-   Replacing provinces that do not match boundary admin province naming convention for the few provinces noted below:\n\n    |                     |                            |\n    |---------------------|----------------------------|\n    | **Tourism Dataset** | **Admin Boundary Dataset** |\n    | Lopburi             | Lop Buri                   |\n    | Chainat             | Chai Nat                   |\n    | Chonburi            | Chon Buri                  |\n    | Prachinburi         | Prachin Buri               |\n    | Phang Nga           | Phangnga                   |\n    | Buriram             | Buri Ram                   |\n    | Sisaket             | Si Sa Ket                  |\n    | Nong Bua Lamphu     | Nong Bua Lam Phu           |\n\n-   Selecting required variables from dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_data <- tourism_data %>%\n  mutate(date = as.Date(date,format = \"%Y-%m-%d\")) %>%\n  mutate(province_eng = str_trim(province_eng)) %>%\n  mutate(province_eng = case_when(\n    province_eng == \"Lopburi\" ~ \"Lop Buri\",\n    province_eng == \"Chainat\" ~ \"Chai Nat\",\n    province_eng == \"Chonburi\" ~ \"Chon Buri\",\n    province_eng == \"Prachinburi\" ~ \"Prachin Buri\",\n    province_eng == \"Phang Nga\" ~ \"Phangnga\",\n    province_eng == \"Buriram\" ~ \"Buri Ram\",\n    province_eng == \"Sisaket\" ~ \"Si Sa Ket\",\n    province_eng == \"Nong Bua Lamphu\" ~ \"Nong Bua Lam Phu\",\n    TRUE ~ province_eng  # Keep the rest unchanged\n  )) %>%\n  select(date, province_eng, region_eng, variable, value)\n```\n:::\n\n\n### Fixing known errors in tourism dataset\n\nFrom the datasource (Kaggle), a discussion highlighted the region data for Sisaket province is incorrect as it should be east_northeast, but was labelled as south in the dataset. Upon googling/maps and review of the data table, it was verified that this is true.\n\nWe will use the following code chunk to correct it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_data[tourism_data$province_eng == \"Si Sa Ket\",][\"region_eng\"] <- \"east_northeast\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(tourism_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  date       province_eng             region_eng variable           value\n  <date>     <chr>                    <chr>      <chr>              <dbl>\n1 2019-01-01 Bangkok                  central    ratio_tourist_stay  93.4\n2 2019-01-01 Lop Buri                 central    ratio_tourist_stay  61.3\n3 2019-01-01 Phra Nakhon Si Ayutthaya central    ratio_tourist_stay  73.4\n4 2019-01-01 Saraburi                 central    ratio_tourist_stay  67.3\n5 2019-01-01 Chai Nat                 central    ratio_tourist_stay  79.3\n6 2019-01-01 Nakhon Pathom            central    ratio_tourist_stay  71.7\n```\n\n\n:::\n:::\n\n\n## Joining the datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_sf <- admin_boundaries %>%\n  left_join(tourism_data, by = c(ADM1_EN = \"province_eng\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(tourism_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 100.3279 ymin: 13.49339 xmax: 100.9385 ymax: 13.9552\nGeodetic CRS:  WGS 84\n  Shape_Leng Shape_Area ADM1_EN ADM1_PCODE       date region_eng\n1   2.417227  0.1313387 Bangkok       TH10 2019-01-01    central\n2   2.417227  0.1313387 Bangkok       TH10 2020-01-01    central\n3   2.417227  0.1313387 Bangkok       TH10 2021-01-01    central\n4   2.417227  0.1313387 Bangkok       TH10 2022-01-01    central\n5   2.417227  0.1313387 Bangkok       TH10 2023-01-01    central\n6   2.417227  0.1313387 Bangkok       TH10 2019-02-01    central\n            variable value                       geometry\n1 ratio_tourist_stay 93.37 MULTIPOLYGON (((100.6139 13...\n2 ratio_tourist_stay 89.36 MULTIPOLYGON (((100.6139 13...\n3 ratio_tourist_stay  7.54 MULTIPOLYGON (((100.6139 13...\n4 ratio_tourist_stay 26.34 MULTIPOLYGON (((100.6139 13...\n5 ratio_tourist_stay 75.02 MULTIPOLYGON (((100.6139 13...\n6 ratio_tourist_stay 89.19 MULTIPOLYGON (((100.6139 13...\n```\n\n\n:::\n:::\n\n\nWe have now created the study area layer in sf at the province level of Thailand.\n\nTo ease further analysis, we would label the aggregate the dates by months and years, followed by a pivot of values under each tourism indicator using the following code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_sf <- tourism_sf %>%\n  mutate(month = month(date),\n         year = year(date)) %>%\n  mutate(year_month = ym(paste(year, month, sep = \"-\")))\n\ntourism_wide <- tourism_sf %>%\n  pivot_wider(names_from = variable, values_from = value)\n\nhead(tourism_wide)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 17 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 100.3279 ymin: 13.49339 xmax: 100.9385 ymax: 13.9552\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 18\n  Shape_Leng Shape_Area ADM1_EN ADM1_PCODE date       region_eng\n       <dbl>      <dbl> <chr>   <chr>      <date>     <chr>     \n1       2.42      0.131 Bangkok TH10       2019-01-01 central   \n2       2.42      0.131 Bangkok TH10       2020-01-01 central   \n3       2.42      0.131 Bangkok TH10       2021-01-01 central   \n4       2.42      0.131 Bangkok TH10       2022-01-01 central   \n5       2.42      0.131 Bangkok TH10       2023-01-01 central   \n6       2.42      0.131 Bangkok TH10       2019-02-01 central   \n# ℹ 12 more variables: geometry <MULTIPOLYGON [°]>, month <dbl>, year <dbl>,\n#   year_month <date>, ratio_tourist_stay <dbl>, no_tourist_stay <dbl>,\n#   no_tourist_all <dbl>, no_tourist_thai <dbl>, no_tourist_foreign <dbl>,\n#   revenue_all <dbl>, revenue_thai <dbl>, revenue_foreign <dbl>\n```\n\n\n:::\n:::\n\n\n# Preparing Data for Spatio Temporal Analysis\n\n## Creating Spatio-Temporal Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_wide$date <- as.Date(tourism_wide$date)\n\ntourism_st <- spacetime(tourism_wide, \n                        admin_boundaries,\n                        .loc_col = \"ADM1_EN\",\n                        .time_col = \"year_month\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(tourism_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n## Creating a Spatial Weights Matrix\n\nUsing queen's contiguity weights matrix using poly2nb() of spdep package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundaries_q <- poly2nb(admin_boundaries,\n                         queen=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(admin_boundaries_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\n```\n\n\n:::\n:::\n\n\n### Removing Phuket island for a separate spatio temporal analysis\n\nIt was noted that 1 region 67 (\"Phuket\") has no links, upon examining the map Phuket is an isloated province with no land connection to other regions of Thailand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distance to nearest neighbor for Phuket\nphuket_dist <- st_distance(admin_boundaries[admin_boundaries$ADM1_EN == \"Phuket\", ],\n                           admin_boundaries[-which(admin_boundaries$ADM1_EN == \"Phuket\"), ])\n\n# Find the minimum distance\nmin_dist <- min(phuket_dist)\n\n# Adjust snap value based on distance\nnew_snap <- min_dist / 2  # Adjust this factor as needed\n\nnew_snap\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n189.6215 [m]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundaries_q <- poly2nb(admin_boundaries,\n                         queen=TRUE,\n                         snap = 10000000)\n```\n:::\n\n\nEven with the snap value of 10,000,000 - we are not able to include Phuket as a neighbour. Thus we would analyse the island separately.\n\n### Plotting admin boundaries with and without Phuket and computing the Queen's contiguity weight matrices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_neighbors <- which(is.null(admin_boundaries_q$neigh))\nadmin_boundaries_filtered <- admin_boundaries[-67, ]\nadmin_boundaries_q_filtered <- poly2nb(admin_boundaries_filtered,\n                                       queen=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude <- map_dbl(admin_boundaries_filtered$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(admin_boundaries_filtered$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind (longitude, latitude)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(admin_boundaries)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(admin_boundaries_filtered)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n:::\n\n\n### Plotting the Queen Contiguity based neighbour map without Phuket.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(admin_boundaries_filtered$geometry, border=\"lightgrey\")\nplot(admin_boundaries_q_filtered,coords, pch = 19, add=TRUE, col=\"red\", cex=0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_admin_boundaries_q_filtered <- nb2listw(admin_boundaries_q_filtered,\n                                           style = \"W\",\n                                           zero.policy = TRUE)\n\nrs_admin_boundaries_q_filtered\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 76 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 6.094183 \nAverage number of links: 4.631579 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n```\n\n\n:::\n:::\n\n\n### Merging tourism data with admin_boundaries\n\nThis CSV contains the tourism indicators summed over the entire dataset period (i.e. 50 months from Jan 2019 to Feb 2023.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_tourism_indicators <- read_csv(\"data/clean/admin_tourism_indicators.csv\")\n```\n:::\n\n\nMerge the above dataset with admin_boundaries dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_wide_filtered_pivot <- admin_boundaries_filtered %>%\n  left_join(admin_tourism_indicators, by = c(ADM1_EN = \"province_eng\"))\n```\n:::\n\n\n# Spatial Analysis\n\n## Global Measures of Spatial Autocorrelation: Moran's I\n\n### Global Moran's I test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- tourism_wide_filtered_pivot%>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(wm_q, \"data/clean/wm_q.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- read_rds(\"data/clean/wm_q.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q$no_tourist_all,\n                  wm_q$nb,\n                  wm_q$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.26682, p-value = 0.3948\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n    -0.0005524132     -0.0133333333      0.0022944608 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q$revenue_all,\n                  wm_q$nb,\n                  wm_q$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = -0.7029, p-value = 0.7589\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.036958473      -0.013333333       0.001129693 \n```\n\n\n:::\n:::\n\n\nNull Hypothesis: There is no spatial autocorrelation in the data, the observed pattern of values is random.\n\nAlternative Hypothesis (H1): There is spatial autocorrelation in the data, the observed pattern of values is not random.\n\nUsing a confidence interval of 95%, and a p-value of 0.3948 and 0.7589 for total number of tourists and total revenue per province, we have insufficient evidence to reject the null hypothesis and that the observed pattern of values is random.\n\nThe I statistic of both tests is also close to zero, suggesting weak or no spatial association.\n\n### Global Moran'I permutation test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q$no_tourist_all,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = -0.00055241, observed rank = 59, p-value = 0.82\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q$revenue_all,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = -0.036958, observed rank = 16, p-value = 0.32\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\nPerforming the test using a monte-carlo simulation of Moran I did not change the results from our earlier test, we still do not have sufficient evidence to reject the null hypothesis and the observed pattern of values is random.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- wm_q %>%\n  mutate(local_moran = local_moran(\n    no_tourist_all, nb, wt, nsim = 99),\n        .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(lisa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n### Local Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"local Moran's I of G\",\n    main.title.size = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nmap1 <- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of number of tourists\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 0.10, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"0.10\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nIt is noted that there are provinces with a low ii value of near -1.0 with significant p_ii values in the Bangkok Metropolitan Region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig <- lisa  %>%\n  filter(p_ii_sim < 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find the indices of the 10 rows with the lowest \"ii\" values \nlowest_ii_indices <- order(lisa$ii)[1:10]  \n# Extract the province names and \"ii\" values corresponding to the lowest \"ii\" values \nlowest_ii_data <- lisa[lowest_ii_indices, c(\"ADM1_EN\", \"ii\", \"p_ii\")]  # Print the results \nprint(\"The 10 provinces with the lowest 'ii' values:\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The 10 provinces with the lowest 'ii' values:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(lowest_ii_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 13.4252 xmax: 103.0126 ymax: 20.14786\nGeodetic CRS:  WGS 84\n# A tibble: 10 × 4\n   ADM1_EN                ii     p_ii                                   geometry\n   <chr>               <dbl>    <dbl>                         <MULTIPOLYGON [°]>\n 1 Bangkok           -0.971  9.27e- 1 (((100.6139 13.95462, 100.6143 13.95442, …\n 2 Samut Sakhon      -0.741  2.94e- 5 (((100.3091 13.7217, 100.3091 13.72169, 1…\n 3 Samut Prakan      -0.423  1.69e-13 (((100.7306 13.71713, 100.7307 13.71681, …\n 4 Pathum Thani      -0.364  8.95e- 4 (((100.8916 14.24576, 100.8916 14.24365, …\n 5 Nonthaburi        -0.250  1.49e- 5 (((100.3415 14.10079, 100.3415 14.10001, …\n 6 Chiang Mai        -0.246  6.09e- 1 (((99.52512 20.1376, 99.52624 20.13757, 9…\n 7 Kanchanaburi      -0.193  7.47e- 1 (((98.58631 15.65465, 98.58662 15.65384, …\n 8 Mae Hong Son      -0.175  3.19e- 1 (((98.0591 19.80385, 98.05993 19.8038, 98…\n 9 Nakhon Ratchasima -0.0929 7.85e- 1 (((102.3144 15.80708, 102.3147 15.80707, …\n10 Chaiyaphum        -0.0790 4.07e- 1 (((101.5603 16.72849, 101.5613 16.72794, …\n```\n\n\n:::\n:::\n\n\nUpon further examination of the dataset, it is noted that the provinces in the Bangkok Metropolitan Region, namely Bangkok and Samut Sakhon have a low ii value near -1.0. This indicates that these provinces are spatial outliers or discordant observations.\n\nUsing the lisa-mean we have also noted the outlier status of these provinces due to the high-low or low-high relationship with its neighbours.\n\n## Hot Spot and Cold Spot Area Analysis\n\n### Computing local Gi\\* statistics\n\nDerive a spatial weight matrix by using sfdep functions and tidyverse approach.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw <- tourism_wide_filtered_pivot %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wts = st_inverse_distance(nb,\n                              geometry,\n                              scale = 1,\n                              alpha = 1),\n    .before = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(wm_idw, \"data/clean/wm_idw.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw <- read_rds(\"data/clean/wm_idw.rds\")\n```\n:::\n\n\nComputing the local Gi\\* by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA <- wm_idw %>%\n  mutate(local_Gi = local_gstar_perm(\n    no_tourist_all, nb, wts, nsim=99),\n    .before = 1) %>%\n  unnest(local_Gi)\n\nHCSA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 76 features and 24 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n# A tibble: 76 × 25\n   gi_star cluster     e_gi  var_gi std_dev  p_value p_sim p_folded_sim skewness\n     <dbl> <fct>      <dbl>   <dbl>   <dbl>    <dbl> <dbl>        <dbl>    <dbl>\n 1 -0.329  High    0.00152  4.79e-7 -0.0583 9.54e- 1  0.92         0.46     1.24\n 2  7.58   Low     0.000756 3.40e-7 16.9    1.93e-64  0.02         0.01     1.56\n 3  3.95   Low     0.00153  2.10e-6  3.64   2.71e- 4  0.1          0.05     2.91\n 4  3.77   Low     0.00176  2.01e-6  3.36   7.69e- 4  0.06         0.03     2.27\n 5 -0.361  High    0.00187  2.18e-6 -0.333  7.39e- 1  0.96         0.48     3.29\n 6  0.232  Low     0.00118  7.52e-7  0.448  6.54e- 1  0.36         0.18     3.61\n 7 -0.0166 High    0.00129  9.39e-7 -0.164  8.70e- 1  0.82         0.41     2.25\n 8 -0.527  Low     0.00123  9.18e-7 -0.509  6.11e- 1  0.56         0.28     3.39\n 9 -0.579  Low     0.00108  1.58e-6 -0.495  6.20e- 1  0.54         0.27     2.81\n10  0.459  High    0.000915 4.31e-7  0.730  4.66e- 1  0.24         0.12     3.08\n# ℹ 66 more rows\n# ℹ 16 more variables: kurtosis <dbl>, nb <nb>, wts <list>, Shape_Leng <dbl>,\n#   Shape_Area <dbl>, ADM1_EN <chr>, ADM1_PCODE <chr>, no_tourist_all <dbl>,\n#   no_tourist_foreign <dbl>, no_tourist_stay <dbl>, no_tourist_thai <dbl>,\n#   ratio_tourist_stay <dbl>, revenue_all <dbl>, revenue_foreign <dbl>,\n#   revenue_thai <dbl>, geometry <MULTIPOLYGON [°]>\n```\n\n\n:::\n:::\n\n\n### Plotting the local Gi\\* at the province level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n### Plotting the p-value of HCSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nmap1 <- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of total number of visitors\",\n            main.title.size = 0.8)\n\nmap2 <- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 0.10, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"0.10\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n### Visualising hot spot and cold spot areas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig <- HCSA  %>%\n  filter(p_sim < 0.05)\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"cluster\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n## Emerging Hot Spot Analysis - Spatial Temporal Data\n\nCreating a spacetime cube\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_wide$date <- as.Date(tourism_wide$date)\n\ntourism_st <- spacetime(tourism_wide, \n                        admin_boundaries,\n                        .loc_col = \"ADM1_EN\",\n                        .time_col = \"year_month\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(tourism_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nno_tourist_nb <- tourism_st %>%\n  activate(\"geometry\") %>% # use the geometry attributes and ignore the rest\n  mutate(nb = include_self( #Gi* = include self, if no * dont include self.\n    st_contiguity(geometry)),\n    wt = st_inverse_distance(nb, #inverse data weight - for Gi*\n                             geometry,\n                             scale = 1,\n                             alpha = 1),\n    .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngi_stars <- no_tourist_nb %>%\n  group_by(year) %>%\n  mutate(gi_star = local_gstar_perm(\n    no_tourist_all, nb, wt)) %>%\n  tidyr::unnest(gi_star)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg <- gi_stars %>%\n  ungroup() %>%\n  filter(ADM1_EN == \"Bangkok\") %>%\n  select(ADM1_EN, year, gi_star)\n```\n:::\n\n\nPlotting the trend of Bangkok province using the Mann-Kendall test, as it was noted to be a spatial outlier in our earlier analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cbg,\n       aes(x=year,\n           y= gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\nIt was noted that the gi_star was the highest in 2020, with a sharp decline after. The decline was likely due to covid, and the area has yet to seen an increase post covid in 2023.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg %>%\n  summarise (mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n     tau     sl     S     D   varS                                      geometry\n   <dbl>  <dbl> <dbl> <dbl>  <dbl>                                 <POLYGON [°]>\n1 -0.234 0.0167  -287  1225 14292. ((100.6128 13.9552, 100.6119 13.95518, 100.6…\n```\n\n\n:::\n:::\n\n\n### Mann-Kendall test data.frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- gi_stars %>%\n  group_by(ADM1_EN) %>%\n  summarise(mk = list (\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\nhead(ehsa)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(ehsa, \"data/clean/ehsa.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- read_rds(\"data/clean/ehsa.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nehsa <- emerging_hotspot_analysis(\n  x = tourism_st,\n  .var = \"no_tourist_all\",\n  k = 1,\n  nsim = 99\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ehsa)\n```\n:::\n\n\nSignificant emerging hot/cold spots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging <- ehsa %>%\n  arrange(sl, abs(tau)) %>%\n  slice(1:10)\nhead(emerging)\n```\n:::\n\n\n### Performing Emerging Hotspot Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- emerging_hotspot_analysis(\n  x = tourism_st, \n  .var = \"no_tourist_all\", \n  k = 1, \n  nsim = 99\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(ehsa, \"data/clean/ehsa2.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa2 <- read_rds(\"data/clean/ehsa2.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_df <- as.data.frame(ehsa2)\n```\n:::\n\n\n### Visualising the distribution of EHSA classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ehsa_df,\n       aes(x = classification)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsporadic_hotspot_df <- ehsa_df %>%\n  filter(classification ==\"sporadic hotspot\")\n\nsporadic_hotspot_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       location         tau   p_value   classification\n1    Nonthaburi -0.14775510 0.1321508 sporadic hotspot\n2     Ang Thong -0.11673469 0.2349083 sporadic hotspot\n3     Bueng Kan  0.12000000 0.2219840 sporadic hotspot\n4  Sakon Nakhon -0.08244898 0.4028817 sporadic hotspot\n5 Nakhon Phanom -0.01387755 0.8935309 sporadic hotspot\n6  Nakhon Sawan -0.12816326 0.1919208 sporadic hotspot\n7  Kanchanaburi -0.12816326 0.1919208 sporadic hotspot\n8   Suphan Buri -0.12163265 0.2157165 sporadic hotspot\n```\n\n\n:::\n:::\n\n\nAlthough there were 8 locations classified as sporadic hotspots, their p-values were above 0.05, hence statistically not significant.\n\n### Visualising EHSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_ehsa <- tourism_wide_filtered_pivot %>%\n  left_join(ehsa_df,\n            by = join_by(ADM1_EN == location))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_sig <- tourism_ehsa  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(tourism_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\nTo further visualize the results, only classifications with no patterns detected were statistically significant at a confidence level of 95%.\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}