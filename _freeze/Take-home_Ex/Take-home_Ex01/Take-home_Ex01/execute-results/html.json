{
  "hash": "8dab15d56c366437a12d5d5c65f8dbfe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 1\"\nauthor: \"Lau Jia Yi\"\ndate: September 9, 2024\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# **Take-home Exercise 1: Geospatial Analytics for Public Good**\n\n## Description\n\nThe specific objectives of this take-home exercise are as follows:\n\n-   To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\n\n-   To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\n\n-   To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\n## Loading the packages required\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, raster, tmap, spNetwork,dplyr, viridis, spatstat)\n```\n:::\n\n\n\n## Loading Road Accident data in Thailand\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %>%\n  mutate(Month_num = month(incident_datetime)) %>%\n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %>%\n  mutate(dayofweek = day(incident_datetime))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(acc, \"data/rds/acc.rds\")  #to write accident file into rds\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_rds(\"data/rds/acc.rds\") #to read accident file from rds\nacc_sf <- acc %>%\n  filter(!is.na(longitude) & !is.na(latitude)) %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\")) %>%\n  st_set_crs(4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- st_read(dsn = \"data/rawdata/\",\n                            layer = \"hotosm_tha_roads_lines_shp\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- st_set_crs(roads, 4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(roads)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(roads)\n```\n:::\n\n\n\nNote: to select columns name_en, highway, surface, lanes, osm_id, osm_type, geometry\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the desired columns\nselected_cols <- c(\"name_en\", \"highway\", \"surface\", \"lanes\", \"osm_id\", \"osm_type\", \"geometry\")\nroads_selected <- roads[, selected_cols]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(roads_selected)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(roads_selected, \"data/rds/road_selected.rds\")  #to write roads file into rds\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroads_selected <- read_rds(\"data/rds/road_selected.rds\") #to read roads file from rds\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(roads_selected)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 6 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 100.7831 ymin: 13.73046 xmax: 100.7936 ymax: 13.74666\nGeodetic CRS:  WGS 84\n                name_en        highway  surface lanes     osm_id  osm_type\n1    Chalong Krung Road      secondary    paved  <NA> 1125681229 ways_line\n2 Soi Chalong Krung 1/1    residential     <NA>  <NA>  594401607 ways_line\n3                  <NA> secondary_link     <NA>  <NA>  472283206 ways_line\n4                  <NA>        service     <NA>  <NA>  594401608 ways_line\n5    Chalong Krung Road      secondary concrete     2  116847248 ways_line\n6                  <NA>        service     <NA>  <NA>  317485095 ways_line\n                        geometry\n1 MULTILINESTRING ((100.7913 ...\n2 MULTILINESTRING ((100.7882 ...\n3 MULTILINESTRING ((100.7844 ...\n4 MULTILINESTRING ((100.7873 ...\n5 MULTILINESTRING ((100.7831 ...\n6 MULTILINESTRING ((100.7931 ...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundaries <- st_read(dsn = \"data/rawdata/\",\n                            layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\Users\\jia_y\\OneDrive - Singapore Management University\\Semester 4\\ISSS626-G1 Geo Spatial Analytics and Applications\\jylau91\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(admin_boundaries)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_population <- read_csv(\"data/rawdata/bmr_population.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_selected <- admin_boundaries %>%\n  filter(ADM1_EN %in% \n           c(\"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"Nakhon Pathom\", \"Samut Sakhon\")) %>%\n  left_join(admin_population, by =\"ADM1_EN\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_sf_within_bmr <- st_join(acc_sf, admin_selected) %>%\n  filter(!is.na(ADM1_EN))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroads_within_bmr <- st_join(roads_selected, admin_selected) %>%\n  filter(!is.na(ADM1_EN))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(roads_within_bmr, \"data/rds/road_within_bmr.rds\")  #to write roads in BMR file into rds\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroads_within_bmr <- read_rds(\"data/rds/road_within_bmr.rds\") #to read roads file from rds\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(roads_within_bmr) +\n  tm_lines()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(roads_within_bmr) +\n  tm_lines() +\n  tm_shape(acc_sf_within_bmr) +\n  tm_dots(col = \"red\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(acc_sf_within_bmr,)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccident_summary <- acc_sf_within_bmr %>%\n  group_by(ADM1_EN, Month_num) %>%\n  summarise(accident_count = n(), groups = 'drop')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a monthly accident count plot\nggplot(accident_summary, aes(x = Month_num, y = accident_count, fill = ADM1_EN)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Monthly Road Traffic Accidents in BMR\",\n       x = \"Month\",\n       y = \"Accident Count\") +\n  scale_x_continuous(breaks = 1:12, labels = month.abb) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge accident_summary with admin_selected to have spatial data\nadmin_selected_with_accidents <- admin_selected %>%\n  st_join(accident_summary, join = st_intersects) %>%\n  mutate(accident_density = accident_count / (population/10000))\n\n# Check if accident counts are merged properly\nhead(admin_selected_with_accidents)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 22 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 100.3279 ymin: 13.49339 xmax: 100.9385 ymax: 13.9552\nGeodetic CRS:  WGS 84\n    Shape_Leng Shape_Area ADM1_EN.x      ADM1_TH ADM1_PCODE ADM1_REF ADM1ALT1EN\n1     2.417227  0.1313387   Bangkok กรุงเทพมหานคร       TH10     <NA>       <NA>\n1.1   2.417227  0.1313387   Bangkok กรุงเทพมหานคร       TH10     <NA>       <NA>\n1.2   2.417227  0.1313387   Bangkok กรุงเทพมหานคร       TH10     <NA>       <NA>\n1.3   2.417227  0.1313387   Bangkok กรุงเทพมหานคร       TH10     <NA>       <NA>\n1.4   2.417227  0.1313387   Bangkok กรุงเทพมหานคร       TH10     <NA>       <NA>\n1.5   2.417227  0.1313387   Bangkok กรุงเทพมหานคร       TH10     <NA>       <NA>\n    ADM1ALT2EN ADM1ALT1TH ADM1ALT2TH  ADM0_EN   ADM0_TH ADM0_PCODE       date\n1         <NA>       <NA>       <NA> Thailand ประเทศไทย         TH 2019-02-18\n1.1       <NA>       <NA>       <NA> Thailand ประเทศไทย         TH 2019-02-18\n1.2       <NA>       <NA>       <NA> Thailand ประเทศไทย         TH 2019-02-18\n1.3       <NA>       <NA>       <NA> Thailand ประเทศไทย         TH 2019-02-18\n1.4       <NA>       <NA>       <NA> Thailand ประเทศไทย         TH 2019-02-18\n1.5       <NA>       <NA>       <NA> Thailand ประเทศไทย         TH 2019-02-18\n       validOn    validTo population ADM1_EN.y Month_num accident_count groups\n1   2022-01-22 -001-11-30    8833400   Bangkok         1            493   drop\n1.1 2022-01-22 -001-11-30    8833400   Bangkok         2            465   drop\n1.2 2022-01-22 -001-11-30    8833400   Bangkok         3            489   drop\n1.3 2022-01-22 -001-11-30    8833400   Bangkok         4            499   drop\n1.4 2022-01-22 -001-11-30    8833400   Bangkok         5            461   drop\n1.5 2022-01-22 -001-11-30    8833400   Bangkok         6            416   drop\n                          geometry accident_density\n1   MULTIPOLYGON (((100.6139 13...        0.5581090\n1.1 MULTIPOLYGON (((100.6139 13...        0.5264111\n1.2 MULTIPOLYGON (((100.6139 13...        0.5535807\n1.3 MULTIPOLYGON (((100.6139 13...        0.5649014\n1.4 MULTIPOLYGON (((100.6139 13...        0.5218829\n1.5 MULTIPOLYGON (((100.6139 13...        0.4709398\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_selected_with_accidents) +\n  tm_fill(\"accident_count\", style = \"quantile\", palette = \"Blues\", title = \"Accident Count\") +\n  tm_borders(col = \"black\") +\n    tm_text(\"ADM1_EN.x\") +  # Add province names as labels\n  tm_layout(title = \"Accident Count by Region\",\n            title.size= 1.2,\n            legend.title.size = 0.9,\n            legend.title.fontface = \"bold\",\n            legend.position = c(\"left\",\"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_selected) +\n  tm_fill(\"population\", style = \"quantile\", palette = \"Blues\", title = \"Population\") +\n  tm_borders(col = \"black\") +\n    tm_text(\"ADM1_EN\") +  # Add province names as labels\n  tm_layout(title = \"Population by Region\",\n            title.size= 1.2,\n            legend.title.size = 0.9,\n            legend.title.fontface = \"bold\",\n            legend.position = c(\"left\",\"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\nObtain 2020 population data: <https://www.citypopulation.de/en/thailand/prov/admin/B__bangkok_metropolitan/>\n\n## Visual by density instead\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a monthly accident count plot\nggplot(admin_selected_with_accidents, aes(x = Month_num, y = accident_density, fill = ADM1_EN.x)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Monthly Road Traffic Accidents in BMR\",\n       x = \"Month\",\n       y = \"Accident Count\") +\n  scale_x_continuous(breaks = 1:12, labels = month.abb) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n### Events in April leading to the increase in accidents\n\nSongkran in Thailand (<https://www.statista.com/topics/11546/songkran-in-thailand/#topicOverview>)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin_selected_with_accidents) +\n  tm_fill(\"accident_density\", style = \"quantile\", palette = \"Blues\", title = \"Accident Density\") +\n  tm_borders(col = \"black\") +\n    tm_text(\"ADM1_EN.x\") +  # Add province names as labels\n  tm_layout(title = \"Accident Population Density (per 10'000) by Region\",\n            title.size= 1.2,\n            legend.title.size = 0.8,\n            legend.title.fontface = \"bold\",\n            legend.position = c(\"left\",\"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n## Spatial Point Pattern Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform accident data to UTM Zone 47N\nacc_sf_projected <- st_transform(acc_sf_within_bmr, crs = 32647)\n\n# Transform admin boundaries to UTM Zone 47N if necessary\nadmin_selected_proj <- st_transform(admin_selected, crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cast to MULTIPOLYGON if necessary\nadmin_selected_multipolygon <- st_cast(admin_selected_proj, \"MULTIPOLYGON\")\n\n# Create a window from the admin boundaries\nwindow <- as.owin(st_geometry(admin_selected_multipolygon))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract coordinates from projected accident data\ncoords <- st_coordinates(acc_sf_projected)\n\n# Create the point pattern object\naccidents_ppp <- ppp(x = coords[, 1], \n                      y = coords[, 2], \n                      window = window)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(accidents_ppp)  # Should return \"ppp\"\nsummary(accidents_ppp)  # Summary of the point pattern\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a spatial point pattern object\naccident_ppp <- ppp(st_coordinates(acc_sf_projected)[, 1], \n                    st_coordinates(acc_sf_projected)[, 2],\n                    window = as.owin(admin_selected_multipolygon))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_result <- density(accident_ppp, sigma = bw.ppl(accident_ppp))\nplot(kde_result, main = \"Kernel Density Estimate of Accidents per Metre\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\nRescale the unit of measurement from meter to kilometer as CRS EPSG:32647 (WGS84) is in metres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccident_ppp.km <- rescale.ppp(accident_ppp, 1000, \"km\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_result.km <- density(accident_ppp.km, sigma=bw.ppl, edge=TRUE, kernel=\"gaussian\")\nplot(kde_result.km, main = \"Kernel Density Estimate of Accidents per Kilometre\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw <- bw.ppl(accident_ppp.km)\nbw\n```\n:::\n\n\n\n## Computing KDE by using fixed bandwith\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_result.km_500 <- density(accident_ppp.km, sigma=0.5, edge=TRUE, kernel=\"gaussian\")\nplot(kde_result.km_500)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n## Computing KDE by using adaptive bandwith\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_result.km_adaptive <- adaptive.density(accident_ppp.km, method=\"kernel\")\nplot(kde_result.km_adaptive)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(kde_result.km_500, main = \"Fixed bandwidth\")\nplot(kde_result.km_adaptive, main = \"Adaptive bandwidth\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\n## Converting KDE into a grid object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_result.km_500\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nreal-valued pixel image\n128 x 128 pixel array (ny, nx)\nenclosing rectangle: [587.89, 712.44] x [1484.4, 1579.1] km\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the pixel coordinates and values from the 'im' object\ncoords <- expand.grid(x = kde_result.km_500$xcol, y = kde_result.km_500$yrow)\nvalues <- as.vector(t(kde_result.km_500$v))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a SpatialPixelsDataFrame\nsp_pixels <- SpatialPixelsDataFrame(points = coords, \n                                    data = data.frame(value = values), \n                                    proj4string = CRS(as.character(NA)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the SpatialPixelsDataFrame to a SpatialGridDataFrame\ngridded_kde_result.km_500 <- as(sp_pixels, \"SpatialGridDataFrame\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use spplot to plot the SpatialGridDataFrame\nspplot(gridded_kde_result.km_500)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n\n## Converting grid output into a raster\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_result.km_500_raster <- raster(kde_result.km_500)\nkde_result.km_500_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -6.366262e-15, 132.7507  (min, max)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprojection(kde_result.km_500_raster) <- CRS(\"+init=EPSG:32647\")\nkde_result.km_500_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.973023, 0.7395512  (x, y)\nextent     : 587.8935, 712.4405, 1484.414, 1579.076  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -6.366262e-15, 132.7507  (min, max)\n```\n\n\n:::\n:::\n\n\n\n## Visualising the output in tmap\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kde_result.km_500_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"left\", \"bottom\"), frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnonthaburi <- admin_selected_multipolygon %>%\n  filter(ADM1_EN == \"Nonthaburi\")\n\npathum_thani <- admin_selected_multipolygon %>%\n  filter(ADM1_EN == \"Pathum Thani\")\n\nbangkok <- admin_selected_multipolygon %>%\n  filter(ADM1_EN == \"Bangkok\")\n\nsamut_prakan <- admin_selected_multipolygon %>%\n  filter(ADM1_EN == \"Samut Prakan\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(nonthaburi, main = \"Nonthaburi\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(pathum_thani, main = \"Pathum Thani\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-54-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(bangkok, main = \"Bangkok\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-54-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(samut_prakan, main = \"Samut Prakan\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-54-4.png){width=672}\n:::\n:::\n\n\n\nCreating owins for SPP analysis of each individual province\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnonthaburi_owin = as.owin(nonthaburi)\npathum_thani_owin = as.owin(pathum_thani)\nbangkok_owin = as.owin(bangkok)\nsamut_prakan_owin = as.owin(samut_prakan)\n```\n:::\n\n\n\nExtract accidents at each specific province of BMR.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccident_nonthaburi_ppp = accident_ppp[nonthaburi_owin]\naccident_pathum_thani_ppp = accident_ppp[pathum_thani_owin]\naccident_bangkok_ppp = accident_ppp[bangkok_owin]\naccident_samut_prakan_ppp = accident_ppp[samut_prakan_owin]\n```\n:::\n\n\n\nNext, *rescale.ppp()* function is used to trasnform the unit of measurement from metre to kilometre.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccident_nonthaburi_ppp.km = rescale.ppp(accident_nonthaburi_ppp, 1000, \"km\")\naccident_pathum_thani_ppp.km = rescale.ppp(accident_pathum_thani_ppp, 1000, \"km\")\naccident_bangkok_ppp.km = rescale.ppp(accident_bangkok_ppp, 1000, \"km\")\naccident_samut_prakan_ppp.km = rescale.ppp(accident_samut_prakan_ppp, 1000, \"km\")\n```\n:::\n\n\n\nTo plot the four provinces of interest and their accident cases.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,1))\nplot(accident_nonthaburi_ppp.km, main=\"Nonthaburi\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(accident_pathum_thani_ppp.km, main=\"Pathum Thani\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-58-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(accident_bangkok_ppp.km, main=\"Bangkok\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-58-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(accident_samut_prakan_ppp.km, main=\"Samut Prakan\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-58-4.png){width=672}\n:::\n:::\n\n\n\nPlotting the KDE of these four provinces of interest using bw.diggle method to derive the bandwith of each province.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,1))\nplot(density(accident_nonthaburi_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Nonthaburi\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(density(accident_pathum_thani_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Pathum Thani\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-59-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(density(accident_bangkok_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Bangkok\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-59-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(density(accident_samut_prakan_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Samut Prakan\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-59-4.png){width=672}\n:::\n:::\n\n\n\nComputing fixed bandwith KDE\n\nFor comparison purposes, we will use 350m as the bandwith.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,1))\nplot(density(accident_nonthaburi_ppp.km, \n             sigma=0.35, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Nonthaburi\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(density(accident_pathum_thani_ppp.km, \n             sigma=0.35, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Pathum Thani\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-60-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(density(accident_bangkok_ppp.km, \n             sigma=0.35, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Bangkok\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-60-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(density(accident_samut_prakan_ppp.km, \n             sigma=0.35, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Samut Prakan\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-60-4.png){width=672}\n:::\n:::\n\n\n\n## Nearest Neighbour Analysis\n\nIn this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\n\nThe test hypotheses are:\n\nHo = The distribution of accidents are randomly distributed.\n\nH1= The distribution of accidents are not randomly distributed.\n\nThe 95% confident interval will be used.\n\n### Clarks and Evans Test (Bangkok Metropolitan Area)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(accident_ppp,\n                correction=\"none\",\n                clipregion=\"window\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accident_ppp\nR = 0.19104, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\nR-value (Clark-Evans ratio) of less than 1 in this set of test results indicates clustering.\n\nThe p-value \\< 2.2e-16, is a very small p-value ( \\<0.05 - 95% significance level) suggests that the test result is statistically significant. The null hypothesis of CSR (randomness) can be rejected.\n\nThe spatial point pattern for accident_ppp shows a significant degree of clustering (R\\<1), given the small p-value we have sufficient evidence to reject the null hypothesis that the points are not randomly distributed and is clustered as the R-value is less than 1.\n\n### Clarks and Evans Test (Nonthaburi)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(accident_nonthaburi_ppp,\n                correction=\"none\",\n                clipregion=\"window\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accident_nonthaburi_ppp\nR = 0.38919, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\n### Clarks and Evans Test (Pathum Thani)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(accident_pathum_thani_ppp,\n                correction=\"none\",\n                clipregion=\"window\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accident_pathum_thani_ppp\nR = 0.24771, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\n### Clarks and Evans Test (Bangkok)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(accident_bangkok_ppp,\n                correction=\"none\",\n                clipregion=\"window\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accident_bangkok_ppp\nR = 0.1211, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\n### Clarks and Evans Test (Samut Prakan)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(accident_samut_prakan_ppp,\n                correction=\"none\",\n                clipregion=\"window\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accident_samut_prakan_ppp\nR = 0.14367, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\nR-value (Clark-Evans ratio) is observed to be less than 1 for all four areas of interest.\n\nThe p-value \\< 2.2e-16, is a very small p-value ( \\<0.05 - 95% significance level) suggests that the test results are statistically significant. The null hypothesis of CSR (randomness) can be rejected.\n\nThe spatial point pattern for all accident spatial points in four provinces shows a significant degree of clustering (R\\<1), given the small p-value we have sufficient evidence to reject the null hypothesis that the points are not randomly distributed and is clustered as the R-value is less than 1.\n\n## SPP Analysis by Months\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform accident data to UTM Zone 47N\n# Split accident data by Month_num\naccidents_by_month <- split(acc_sf_projected, acc_sf_projected$Month_num)\n\n# Create an empty list to store the ppp objects for each month\nppp_list <- list()\n\n# Loop through each month and create a ppp object\nfor (i in 1:12) {\n  # Extract accidents for the current month\n  acc_month <- accidents_by_month[[i]]\n  \n  # Create a ppp object for the current month\n  ppp_list[[i]] <- ppp(st_coordinates(acc_month)[, 1], \n                       st_coordinates(acc_month)[, 2],\n                       window = as.owin(admin_selected_multipolygon))\n}\n\n# Optionally, name each ppp object by month\nnames(ppp_list) <- month.abb[1:12]\n\n# Check the ppp object for January (example)\nppp_list[[\"Jan\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPlanar point pattern: 1149 points\nwindow: polygonal boundary\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty list to store the KDE results for each month\nkde_results <- list()\n\n# Loop through each month to perform KDE\nfor (i in 1:12) {\n  # Extract the ppp object for the current month\n  accident_ppp_month <- ppp_list[[i]]\n  \n  # Perform KDE for the current month's ppp object\n  kde_results[[i]] <- density(accident_ppp_month, sigma = 0.5, edge = TRUE, kernel = \"gaussian\")\n}\n\n# Optionally, name each KDE result by month\nnames(kde_results) <- month.abb[1:12]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up a 3x4 plotting grid\npar(mfrow = c(1, 1))\n\n# Loop through the months and plot the KDE for each month\nfor (i in 1:12) {\n  plot(kde_results[[i]], main = month.abb[i], col = viridis::viridis(100),\n       xlab = \"X\", ylab = \"Y\", las = 1)\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-12.png){width=672}\n:::\n:::\n\n\n\n## Network KDE (NKDE) Analysis\n\nIn this section, we will perform NKDE analysis by using functions provided in spNetwork package.\n\nSpatial Lines (road network) object in BMR is cut into lixels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads_within_bkk <- roads_within_bmr %>%\n  filter(ADM1_EN ==\"Bangkok\")\n\nacc_sf_projected_bkk <- acc_sf_projected %>%\n  filter(ADM1_EN ==\"Bangkok\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels <- lixelize_lines(roads_within_bkk, \n                         500, \n                         mindist = 350)\n```\n:::\n\n\n\nGenerating samples of the road network using lines_center() of spNetwork.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <-lines_center(lixels)\n```\n:::\n\n\n\nPerform NKDE\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_bkk_32647 <- st_zm(acc_sf_projected_bkk)\nacc_bkk_32647\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6090 features and 36 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 644139 ymin: 1505014 xmax: 708461.2 ymax: 1542968\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6,090 × 37\n   acc_code incident_datetime   report_datetime     province_th  province_en\n *    <dbl> <dttm>              <dttm>              <chr>        <chr>      \n 1   629691 2019-01-01 03:05:00 2019-01-01 03:05:00 กรุงเทพมหานคร Bangkok    \n 2   629689 2019-01-01 05:42:00 2019-01-01 05:42:00 กรุงเทพมหานคร Bangkok    \n 3   604307 2019-01-01 10:10:00 2019-03-06 10:49:00 กรุงเทพมหานคร Bangkok    \n 4  3793736 2019-01-01 17:30:00 2020-03-11 13:15:00 กรุงเทพมหานคร Bangkok    \n 5   599070 2019-01-01 19:20:00 2019-01-01 20:57:00 กรุงเทพมหานคร Bangkok    \n 6   613605 2019-01-01 21:40:00 2019-11-18 10:57:00 กรุงเทพมหานคร Bangkok    \n 7   615219 2019-01-01 22:15:00 2019-12-27 10:12:00 กรุงเทพมหานคร Bangkok    \n 8   613557 2019-01-01 23:05:00 2019-11-18 10:57:00 กรุงเทพมหานคร Bangkok    \n 9   629699 2019-01-02 03:40:00 2019-01-02 03:40:00 กรุงเทพมหานคร Bangkok    \n10  3793707 2019-01-02 07:00:00 2020-03-11 12:57:00 กรุงเทพมหานคร Bangkok    \n# ℹ 6,080 more rows\n# ℹ 32 more variables: agency <chr>, route <chr>, vehicle_type <chr>,\n#   presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, road_description <chr>,\n#   slope_description <chr>, Month_num <dbl>, Month_fac <ord>, dayofweek <int>,\n#   geometry <POINT [m]>, Shape_Leng <dbl>, Shape_Area <dbl>, ADM1_EN <chr>, …\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroads_within_bkk_simple <- st_cast(roads_within_bkk, \"LINESTRING\")\nroads_within_bkk_simple_projected <- st_transform(roads_within_bkk_simple,crs = 32647)\nsamples_projected <- st_transform(samples,crs = 32647)\n\n#st_crs(roads_within_bmr_simple_projected)\n#st_crs(samples_projected)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndensities <- nkde(roads_within_bkk_simple_projected, \n                  events = acc_bkk_32647,\n                  w = rep(1, nrow(acc_bkk_32647)),\n                  samples = samples_projected,\n                  kernel_name = \"quartic\",\n                  bw = 250, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(5,5), \n                  max_depth = 8,\n                  agg = 5, \n                  sparse = TRUE,\n                  verbose = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(densities, \"data/rds/densities.rds\")  #to write densities file into rds\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndensities <- read_rds(\"data/rds/densities.rds\") #to read densities from rds\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples_projected$density <- densities\nlixels$density <- densities\n\n# rescaling to help the mapping\nsamples_projected$density <- samples_projected$density*1000\nlixels$density <- lixels$density*1000\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(acc_bkk_32647)+\n  tm_dots()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n:::\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}